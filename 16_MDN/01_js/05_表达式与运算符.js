// @ts-nocheck
/**
 * 运算符
 */
// 1、赋值运算符
x = y // 赋值
x += y // 加法赋值
x -= y // 减法赋值
x *= y // 乘法赋值
x /= y // 除法赋值
x %= y // 求余赋值
x ** = y // 求幂赋值（感觉有问题）
x <<= y // 左移位赋值
x >>= y // 右移位赋值
x >>>= y // 无符号右移位
x &= y // 按位与赋值
x ^= y // 按位异或赋值
x |= y // 按位或赋值

// 2、解构
var foo = ['one', 'two', 'three']

var [one, tow, three] = foo

// 3、比较运算符
3 == '3' // true，等于，类型会默认转换
2 != 3 // true，不等符号
3 === 3 // true，全等符号，类型也必须一致
3 !== '3' // true，不全等
3 > 2 // true，大于符号
3 >= 2 // true, 大于等于符号
3 < 2 // false，小于符号
3 <= 2 // false, 小于等于符号

// 4、算术运算符
1 + 2 // 3, 加号
2 - 1 // 1, 减号
2 / 1 // 2, 除号
2 * 1 // 2, 乘号
1 % 2 // 1, 求余数

var a = 1
console.log(a++) // 打印1： 先读取a = 1, 再执行 a = a + 1
console.log(a) // 打印2
console.log(++a) // 打印3：先执行a = a + 1, 再读取 a 的值
console.log(a) // 打印3

a--  // 分析与上一样
--a 

-a // 取反

2 ** 3 // 得到8，指数运算符
var a = 2
a **= 3 // 此时a = 8 = 2 * 2 * 2

// 4、位运算符：将操作数视为32位元的二进制串，由0和1组成的数
var a = 12, b = 20 // 其实被视为了十进制

a.toString(2) // 1100 --> 二进制
b.toString(2) // 10100 --> 二进制

a & b // 4, 按位与：每一个对应的位都为1则返回1，否则返回0 --> 结果是 1100 & 10100 => 00100 ->100
a | b // 28, 按位或: 每一个对应的位，只有一个为1则返回1，否则返回0 --> 结果是 11100, 转为十进制就是28
a ^ b // 24, 按位异或：每一个对应的位，两个不相同则返回1，否则返回0 --> 11000
~a // -1101, 按位非：反转被操作数的位 --> 最后得到的是-13， 没想通
a << 2 // 48, 左移：将a的二进制向左移动b位，右边移入0 --> 1100 表示往左移动2位，变成了110000
a >> 2 // 3， 右移：将a的二进制表示向右移动b位，丢弃被移出的所有位 --> 1100表示往右移动2位，变成了0011, 所以就是3
a >>> 3 // 1, 无符号右移：把a的二进制表示向右移动b位置，丢弃被移出的所有位，并把左边空出的位都填充0 --> 1100 向右移动3位，变成了0001，就变为了1


