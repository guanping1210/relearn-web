/**
 * 资料：https://juejin.cn/post/6844903998986665998
 * 
 * 前端监控分类：
 *  1、数据监控 --> 监听用户信息和行为
 *      PV 页面浏览量或点击量
 *      UV 独立访客，指的是访问的不同IP地址的人数
 *      用户在每个页面的停留时间
 *      用户通过什么入口访问该网页
 *      用户在页面中触发的行为
 * 
 *  2、性能监控 --> 监听前端性能
 *      不同用户、不同机型和不同系统下的首屏加载时间
 *      http等请求的响应时间
 *      静态资源整体下载时间
 *      页面渲染时间
 *      页面交互动画完成时间
 *      
 *  3、异常监控
 *      javascript的异常监控
 *      样式丢失的异常监控
 *      服务器请求的异常监控
 * 
 * 前端埋点分类：
 *  1、手动埋点 --> 代码埋点 --> 友盟、百度统计
 *      手写代码，调用埋点SDK的函数，在业务需要埋点的地方调用接口，上报埋点数据
 * 
 *  2、可视化埋点 --> 太复杂 --> Talking、诸葛IO
 * 
 *  3、无埋点 --> 前端自动采集全部事件，上报埋点数据，由后端过滤和计算得出数据 --> GrowingID、神策、Sentry
 *  
 * 捕获信息思路：
 *  1、捕获全局JS错误：重写window.onerror | unhandledrejection | console.error 方法
 *      onerror 获取不到跨域的script的错误：给script标签设置 crossorigin 属性
 *      console.error 方法能够比较全面的捕获到错误
 *      unhandledrejection 可以捕获到promise的错误
 * 
 *  2、捕获API接口请求：核心都是基于XMLHttpRequest，所以给XMLHttpRequest添加监听事件；重写fetch方法
 *  3、计算静态资源加载：检测error，然后看是否是加载的错误
 *  4、得出渲染效率：performance相关的API，可以获得首次加载的性能数据, dns, tcp, 白屏时间等
 *  5、用户行为：点击、停留时间等
 * 
 * 前端如何获取设备信息：navigator， 移动端可能还需要另外想办法获取额外的信息
 *  navigator.appVersion: 能够获取到系统信息，浏览器版本，内核等信息
 *  
 */